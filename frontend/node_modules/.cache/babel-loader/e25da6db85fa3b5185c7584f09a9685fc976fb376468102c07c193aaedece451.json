{"ast":null,"code":"import fetch from 'cross-fetch';\nimport Auth from '../utils/Auth';\nexport const READ_EMAIL_VALUE = 'READ_EMAIL_VALUE';\nconst readEmail = value => ({\n  type: READ_EMAIL_VALUE,\n  value: value\n});\nexport const READ_PASSWORD_VALUE = 'READ_PASSWORD_VALUE';\nconst readPassword = value => ({\n  type: READ_PASSWORD_VALUE,\n  value: value\n});\nexport const BEGIN_FETCH = 'BEGIN_FETCH';\nconst biginFetch = () => ({\n  type: BEGIN_FETCH\n});\nexport const SUCCEED = 'SUCCEED';\nconst resolve = res => ({\n  type: SUCCEED,\n  value: res\n});\nexport const FAIL = 'FAIL';\nconst reject = error => ({\n  type: FAIL,\n  value: error\n});\n\n// Asynchorous action creator\nconst asynchorousFetchUserDB = (email, password) => {\n  const loginInfo = {\n    email: email,\n    password: password\n  };\n  return dispatch => {\n    dispatch(biginFetch());\n    fetch(\"http://localhost:3002/auth/login\", {\n      method: 'POST',\n      body: JSON.stringify(loginInfo),\n      headers: {\n        \"Content-Type\": \"application/json\"\n      }\n    }).then(res => res.json()).then(res => {\n      console.log(res);\n      Auth.authenticateUser(res.token, res.email);\n      return dispatch(resolve(res));\n    }).catch(error => {\n      console.log(error);\n      return dispatch(reject(error));\n    });\n  };\n};\nexport const EXAM_FETCH_BEGIN = 'EXAM_FETCH_BEGIN';\nconst examFetchBigin = () => ({\n  type: EXAM_FETCH_BEGIN\n});\nexport const EXAM_FETCH_SUCCEED = 'EXAM_FETCH_SUCCEED';\nconst examFetchSucceed = res => ({\n  type: EXAM_FETCH_SUCCEED,\n  value: res\n});\nexport const EXAM_FETCH_FAIL = 'EXAM_FETCH_FAIL';\nconst examFetchFail = error => ({\n  type: EXAM_FETCH_FAIL,\n  value: error\n});\nexport const EXIT_EXAM = 'EXIT_EXAM';\nconst exitExam = () => {\n  Auth.deAuthenticateUser();\n  return {\n    type: EXIT_EXAM\n  };\n};\nexport const SET_ANSWEWR = 'SET_ANSWEWR';\nconst setAnswer = (id, questionType, option) => ({\n  type: SET_ANSWEWR,\n  id: id,\n  questionType: questionType,\n  value: option\n});\nexport const ANSWEWR_SEND_BEGIN = 'ANSWEWR_SEND_BEGIN';\nconst answerSendBigin = () => ({\n  type: ANSWEWR_SEND_BEGIN\n});\nexport const ANSWEWR_SEND_SUCCEED = 'ANSWEWR_SEND_SUCCEED';\nconst answerSendSucceed = res => {\n  Auth.deAuthenticateUser();\n  return {\n    type: ANSWEWR_SEND_SUCCEED,\n    value: res\n  };\n};\nexport const ANSWEWR_SEND_FAIL = 'ANSWEWR_SEND_FAIL';\nconst answerSendFail = error => ({\n  type: ANSWEWR_SEND_FAIL,\n  value: error\n});\nconst asynchorousSendAnswer = questionPayload => {\n  console.log(questionPayload);\n  return dispatch => {\n    dispatch(answerSendBigin());\n    fetch(\"http://localhost:3002/api/exam\", {\n      method: 'POST',\n      body: JSON.stringify(questionPayload),\n      headers: {\n        \"Content-Type\": \"application/json\"\n      }\n    }).then(res => res.json()).then(res => {\n      console.log(res);\n      if (res.status) dispatch(answerSendSucceed(res.score));else dispatch(answerSendFail({\n        error: res.error\n      }));\n    }).catch(error => {\n      console.log(error);\n      dispatch(answerSendFail(error));\n    });\n  };\n};\nexport { readEmail, readPassword, asynchorousFetchUserDB, biginFetch, resolve, reject, examFetchBigin, examFetchSucceed, examFetchFail, exitExam, setAnswer, asynchorousSendAnswer };","map":{"version":3,"names":["fetch","Auth","READ_EMAIL_VALUE","readEmail","value","type","READ_PASSWORD_VALUE","readPassword","BEGIN_FETCH","biginFetch","SUCCEED","resolve","res","FAIL","reject","error","asynchorousFetchUserDB","email","password","loginInfo","dispatch","method","body","JSON","stringify","headers","then","json","console","log","authenticateUser","token","catch","EXAM_FETCH_BEGIN","examFetchBigin","EXAM_FETCH_SUCCEED","examFetchSucceed","EXAM_FETCH_FAIL","examFetchFail","EXIT_EXAM","exitExam","deAuthenticateUser","SET_ANSWEWR","setAnswer","id","questionType","option","ANSWEWR_SEND_BEGIN","answerSendBigin","ANSWEWR_SEND_SUCCEED","answerSendSucceed","ANSWEWR_SEND_FAIL","answerSendFail","asynchorousSendAnswer","questionPayload","status","score"],"sources":["D:/Office/Code/NodeJs/Online-Exam-System-master/frontend/src/actions/actions.js"],"sourcesContent":["import fetch from 'cross-fetch'\nimport Auth from '../utils/Auth'\n\nexport const READ_EMAIL_VALUE = 'READ_EMAIL_VALUE'\nconst readEmail=(value)=>({\n    type: READ_EMAIL_VALUE,\n    value: value\n})\n\nexport const READ_PASSWORD_VALUE = 'READ_PASSWORD_VALUE'\nconst readPassword=(value)=>({\n    type: READ_PASSWORD_VALUE,\n    value: value\n})\n\nexport const BEGIN_FETCH = 'BEGIN_FETCH'\nconst biginFetch=()=>({\n    type: BEGIN_FETCH\n})\n\nexport const SUCCEED = 'SUCCEED'\nconst resolve=(res)=>({\n    type: SUCCEED,\n    value: res\n})\n\nexport const FAIL = 'FAIL'\nconst reject=(error)=>({\n    type: FAIL,\n    value: error\n})\n\n// Asynchorous action creator\nconst asynchorousFetchUserDB = (email, password)=>{\n    const loginInfo = {\n        email: email,\n        password: password\n    }\n\n    return (dispatch)=>{\n        dispatch(biginFetch());\n        fetch(\"http://localhost:3002/auth/login\",{\n            method: 'POST',\n            body: JSON.stringify(loginInfo),\n            headers: {\n                \"Content-Type\": \"application/json\"\n            }\n        })\n        .then(\n            res => res.json()\n        ).then(\n            res=>{\n                console.log(res);\n                Auth.authenticateUser(res.token, res.email)\n                return dispatch(resolve(res) )\n            }\n        ).catch(\n            (error)=>{\n                console.log(error);\n                return dispatch(reject(error) )\n            }\n        )\n    }\n}\n\nexport const EXAM_FETCH_BEGIN = 'EXAM_FETCH_BEGIN'\nconst examFetchBigin=()=>({\n    type: EXAM_FETCH_BEGIN\n})\n\nexport const EXAM_FETCH_SUCCEED = 'EXAM_FETCH_SUCCEED'\nconst examFetchSucceed=(res)=>({\n    type: EXAM_FETCH_SUCCEED,\n    value: res\n})\n\nexport const EXAM_FETCH_FAIL = 'EXAM_FETCH_FAIL'\nconst examFetchFail=(error)=>({\n    type: EXAM_FETCH_FAIL,\n    value: error\n})\n\nexport const EXIT_EXAM = 'EXIT_EXAM'\nconst exitExam =()=>{\n    Auth.deAuthenticateUser();\n    return {type: EXIT_EXAM}\n}\n\nexport const SET_ANSWEWR = 'SET_ANSWEWR'\nconst setAnswer =(id, questionType, option)=>({\n    type: SET_ANSWEWR,\n    id: id,\n    questionType: questionType,\n    value: option\n})\n\n\nexport const ANSWEWR_SEND_BEGIN = 'ANSWEWR_SEND_BEGIN'\nconst answerSendBigin=()=>({\n    type: ANSWEWR_SEND_BEGIN\n})\n\nexport const ANSWEWR_SEND_SUCCEED = 'ANSWEWR_SEND_SUCCEED'\nconst answerSendSucceed =(res)=>{\n    Auth.deAuthenticateUser();\n    return{\n        type: ANSWEWR_SEND_SUCCEED,\n        value: res\n    }\n}\n\nexport const ANSWEWR_SEND_FAIL= 'ANSWEWR_SEND_FAIL'\nconst answerSendFail =(error)=>({\n    type: ANSWEWR_SEND_FAIL,\n    value: error\n\n})\n\nconst asynchorousSendAnswer=(questionPayload)=>{\n    console.log(questionPayload);\n    return (dispatch)=>{\n        dispatch(answerSendBigin());\n\n        fetch(\"http://localhost:3002/api/exam\",{\n            method: 'POST',\n            body: JSON.stringify(questionPayload),\n            headers: {\n                \"Content-Type\": \"application/json\"\n            }\n        })\n        .then( res=>res.json() )\n        .then( res=>{\n            console.log(res);\n            if( res.status)\n                dispatch(answerSendSucceed(res.score) )\n            else\n                dispatch(answerSendFail({error: res.error}) )\n        })\n        .catch( error=>{\n            console.log(error);\n            dispatch(answerSendFail(error) )\n        })\n    }\n}\n\n\nexport {readEmail, readPassword, asynchorousFetchUserDB, biginFetch, resolve, reject, examFetchBigin, examFetchSucceed, examFetchFail, exitExam, setAnswer, asynchorousSendAnswer}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}