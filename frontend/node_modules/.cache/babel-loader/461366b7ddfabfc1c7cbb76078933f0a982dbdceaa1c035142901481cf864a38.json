{"ast":null,"code":"import { READ_EMAIL_VALUE, READ_PASSWORD_VALUE, BEGIN_FETCH, SUCCEED, FAIL, EXAM_FETCH_BEGIN, EXAM_FETCH_SUCCEED, EXAM_FETCH_FAIL, EXIT_EXAM, SET_ANSWEWR, ANSWEWR_SEND_BEGIN, ANSWEWR_SEND_SUCCEED, ANSWEWR_SEND_FAIL } from '../actions/actions';\n\n// initial state\nlet initialState = {\n  email: '',\n  password: '',\n  isValidUser: false,\n  userData: {\n    isFetching: false,\n    didInvalidate: false,\n    data: {}\n  },\n  examData: {\n    isFetching: false,\n    didInvalidate: false,\n    data: {}\n  },\n  scoreData: {\n    isFetching: false,\n    isSubmitted: false,\n    didInvalidate: false,\n    score: 0\n  }\n};\nconst setInitialState = newValue => {\n  initialState = newValue;\n};\nconst getInitialState = () => initialState;\nconst reducer = (state = initialState, action) => {\n  const type = action.type;\n  const value = action.value;\n  const questionId = action.id;\n  const questionType = action.questionType;\n  switch (type) {\n    case READ_EMAIL_VALUE:\n      return Object.assign({}, state, {\n        email: value\n      });\n    case READ_PASSWORD_VALUE:\n      return Object.assign({}, state, {\n        password: value\n      });\n    case BEGIN_FETCH:\n      return {\n        ...state,\n        userData: {\n          ...state.userData,\n          isFetching: true\n        }\n      };\n    case SUCCEED:\n      {\n        console.log(value);\n        return {\n          ...state,\n          isValidUser: value.status,\n          userData: {\n            ...state.userData,\n            isFetching: false,\n            data: value\n          }\n        };\n      }\n    case FAIL:\n      return {\n        ...state,\n        userData: {\n          ...state.userData,\n          isFetching: false,\n          didInvalidate: true\n        }\n      };\n    case EXAM_FETCH_BEGIN:\n      return {\n        ...state,\n        examData: {\n          ...state.examData,\n          isFetching: true\n        }\n      };\n    case EXAM_FETCH_SUCCEED:\n      return {\n        ...state,\n        examData: {\n          ...state.examData,\n          isFetching: false,\n          data: value\n        }\n      };\n    case EXAM_FETCH_FAIL:\n      return {\n        ...state,\n        examData: {\n          ...state.examData,\n          isFetching: false,\n          didInvalidate: true\n        }\n      };\n    case EXIT_EXAM:\n      return {\n        ...state,\n        isValidUser: false,\n        email: '',\n        password: ''\n      };\n    case SET_ANSWEWR:\n      {\n        const oldData = state.examData.data;\n        const section = 'section' + questionType;\n        const oldSection = oldData[section];\n        const index = oldSection.findIndex(item => item.id === questionId);\n        const newItem = {\n          ...oldSection[index],\n          answer: value\n        };\n        const newSection = [...oldSection.slice(0, index), newItem, ...oldSection.slice(index + 1)];\n        const newdata = {\n          ...oldData,\n          [section]: newSection\n        };\n        return {\n          ...state,\n          examData: {\n            ...state.examData,\n            data: newdata\n          }\n        };\n      }\n    case ANSWEWR_SEND_BEGIN:\n      return {\n        ...state,\n        scoreData: {\n          ...state.scoreData,\n          isFetching: true\n        }\n      };\n    case ANSWEWR_SEND_SUCCEED:\n      return {\n        ...state,\n        isValidUser: false,\n        email: '',\n        password: '',\n        scoreData: {\n          ...state.scoreData,\n          isFetching: false,\n          isSubmitted: true,\n          score: value\n        }\n      };\n    case ANSWEWR_SEND_FAIL:\n      return {\n        ...state,\n        scoreData: {\n          ...state.scoreData,\n          isFetching: false,\n          didInvalidate: true\n        }\n      };\n    default:\n      return state;\n  }\n};\n// const EmailAndPassword =( state=initialState, action )=>{\n//     const type = action.type;\n//     const value = action.value;\n//     switch( type ){\n//         case READ_EMAIL_VALUE:\n//             return  Object.assign({}, state, {email: value});\n//         case READ_PASSWORD_VALUE:\n//             return  Object.assign({}, state, {password: value});\n//         default:\n//             return state;\n//     }\n// }\n//\n// const AsynchorousFetchUserDB =( state={...state, userData:{}}, action )=>{\n//     const type = action.type;\n//     const value = action.value;\n//     console.log(state);\n//\n//     switch( type ){\n//         case BEGIN_FETCH:\n//             return { ...state, userData:{...state.userData, isFetching: true}};\n//         case SUCCEED:\n//                     {\n//                         const targetUser = value.filter( user => user.email===state.email );\n//                         console.log(state.email);\n//\n//                         const flag = targetUser.length > 0;\n//                         console.log(flag);\n//\n//                         return { ...state,  userData:{...state.userData, isFetching: false, data: value}};\n//                     }\n//         case FAIL:\n//             return { ...state, userData:{...state.userData, isFetching: false, didInvalidate: true}};\n//         default:\n//             return state;\n//     }\n// }\n\n// const reducer = combineReducers({ EmailAndPassword, AsynchorousFetchUserDB })\n\nexport { getInitialState, setInitialState, reducer };","map":{"version":3,"names":["READ_EMAIL_VALUE","READ_PASSWORD_VALUE","BEGIN_FETCH","SUCCEED","FAIL","EXAM_FETCH_BEGIN","EXAM_FETCH_SUCCEED","EXAM_FETCH_FAIL","EXIT_EXAM","SET_ANSWEWR","ANSWEWR_SEND_BEGIN","ANSWEWR_SEND_SUCCEED","ANSWEWR_SEND_FAIL","initialState","email","password","isValidUser","userData","isFetching","didInvalidate","data","examData","scoreData","isSubmitted","score","setInitialState","newValue","getInitialState","reducer","state","action","type","value","questionId","id","questionType","Object","assign","console","log","status","oldData","section","oldSection","index","findIndex","item","newItem","answer","newSection","slice","newdata"],"sources":["D:/Office/Code/NodeJs/Online-Exam-System-master/frontend/src/reducers/reducer.js"],"sourcesContent":["\nimport {READ_EMAIL_VALUE, READ_PASSWORD_VALUE,\n        BEGIN_FETCH, SUCCEED, FAIL,\n        EXAM_FETCH_BEGIN, EXAM_FETCH_SUCCEED, EXAM_FETCH_FAIL,\n        EXIT_EXAM,\n        SET_ANSWEWR,\n        ANSWEWR_SEND_BEGIN, ANSWEWR_SEND_SUCCEED, ANSWEWR_SEND_FAIL } from '../actions/actions'\n\n\n// initial state\nlet initialState = {\n    email: '',\n    password: '',\n    isValidUser: false,\n    userData:{\n        isFetching: false,\n        didInvalidate: false,\n        data:{}\n    },\n    examData:{\n        isFetching: false,\n        didInvalidate: false,\n        data:{}\n    },\n    scoreData:{\n        isFetching: false,\n        isSubmitted: false,\n        didInvalidate: false,\n        score: 0\n    }\n};\n\nconst setInitialState =(newValue)=>{\n    initialState = newValue;\n}\nconst getInitialState = ()=>(initialState)\n\nconst reducer =( state=initialState, action )=>{\n    const type = action.type;\n    const value = action.value;\n    const questionId = action.id;\n    const questionType = action.questionType;\n\n    switch( type ){\n        case READ_EMAIL_VALUE:\n            return  Object.assign({}, state, {email: value});\n        case READ_PASSWORD_VALUE:\n            return  Object.assign({}, state, {password: value});\n        case BEGIN_FETCH:\n            return { ...state, userData:{...state.userData, isFetching: true}};\n        case SUCCEED:{\n            console.log(value);\n            return { ...state,  isValidUser: value.status, userData:{...state.userData, isFetching: false, data: value}};\n        }\n        case FAIL:\n            return { ...state, userData:{...state.userData, isFetching: false, didInvalidate: true}};\n        case EXAM_FETCH_BEGIN:\n            return { ...state, examData:{...state.examData, isFetching: true}};\n        case EXAM_FETCH_SUCCEED:\n            return { ...state, examData:{...state.examData, isFetching: false, data: value}};\n        case EXAM_FETCH_FAIL:\n            return { ...state, examData:{...state.examData, isFetching: false, didInvalidate: true}};\n        case EXIT_EXAM:\n            return { ...state, isValidUser: false, email: '', password:''};\n        case SET_ANSWEWR:{\n            const oldData = state.examData.data;\n            const section = 'section' + questionType;\n            const oldSection = oldData[section];\n            const index = oldSection.findIndex( item=>item.id===questionId );\n            const newItem = {...oldSection[index], answer: value}\n            const newSection = [ ...oldSection.slice(0, index), newItem, ...oldSection.slice(index+1) ];\n            const newdata = { ...oldData, [section]: newSection}\n            return { ...state, examData:{...state.examData, data: newdata}}\n        }\n        case ANSWEWR_SEND_BEGIN:\n            return { ...state, scoreData:{...state.scoreData, isFetching: true}};\n        case ANSWEWR_SEND_SUCCEED:\n            return { ...state, isValidUser: false, email: '', password:'', scoreData:{...state.scoreData, isFetching: false, isSubmitted: true,  score: value}};\n        case ANSWEWR_SEND_FAIL:\n            return { ...state, scoreData:{...state.scoreData, isFetching: false, didInvalidate: true}};\n        default:\n            return state;\n    }\n}\n// const EmailAndPassword =( state=initialState, action )=>{\n//     const type = action.type;\n//     const value = action.value;\n//     switch( type ){\n//         case READ_EMAIL_VALUE:\n//             return  Object.assign({}, state, {email: value});\n//         case READ_PASSWORD_VALUE:\n//             return  Object.assign({}, state, {password: value});\n//         default:\n//             return state;\n//     }\n// }\n//\n// const AsynchorousFetchUserDB =( state={...state, userData:{}}, action )=>{\n//     const type = action.type;\n//     const value = action.value;\n//     console.log(state);\n//\n//     switch( type ){\n//         case BEGIN_FETCH:\n//             return { ...state, userData:{...state.userData, isFetching: true}};\n//         case SUCCEED:\n//                     {\n//                         const targetUser = value.filter( user => user.email===state.email );\n//                         console.log(state.email);\n//\n//                         const flag = targetUser.length > 0;\n//                         console.log(flag);\n//\n//                         return { ...state,  userData:{...state.userData, isFetching: false, data: value}};\n//                     }\n//         case FAIL:\n//             return { ...state, userData:{...state.userData, isFetching: false, didInvalidate: true}};\n//         default:\n//             return state;\n//     }\n// }\n\n// const reducer = combineReducers({ EmailAndPassword, AsynchorousFetchUserDB })\n\n\nexport  {getInitialState, setInitialState, reducer};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}